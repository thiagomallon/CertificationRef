<?php
namespace Test\InputOutput;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-27 at 13:02:39.
 */
class ZlibManipulationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ZlibManipulation
     */
    protected $_zlibManipulation;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_zlibManipulation = new \App\InputOutput\ZlibManipulation;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_zlibManipulation);
    }

    /**
     * @covers App\InputOutput\ZlibManipulation::writingOnGz
     */
    public function testWritingOnGz()
    {
        // Remove the following lines when you implement this test.
        $this->_zlibManipulation->writingOnGz('Hi brother!'.PHP_EOL);
    }

    /**
     * @covers App\InputOutput\ZlibManipulation::readingGz
     */
    public function testReadingGz()
    {
        $content = $this->_zlibManipulation->readingGz();
        $this->assertContains('Hi brother!', $content);
    }

    /**
     * Método tenta abrir arquivo inexistência, para leitura e espera-se
     * que seja gerada uma exceção
     * @expectedException App\ErrorsAndExceptions\FileNotFoundException
     * @expectedExceptionMessage File not found
     * @covers App\InputOutput\ZlibManipulation::readingGz
     */
    public function testReadingGzEx()
    {
        $content = $this->_zlibManipulation->readingGz('notExistentFile.gz');
    }

    /**
     * The testStringCompressor method
     * @covers App\InputOutput\ZlibManipulation::stringCompressor
     * @return null
     */
    public function testStringCompressor()
    {
        $compressed = $this->_zlibManipulation->stringCompressor('Something useful'); // passa string ao método de compressão
        $this->assertEquals('Something useful', gzuncompress($compressed)); // verifica se descompressão resulta em valor esperado
    }

    /**
     * The testStringUncompressor method
     * @covers App\InputOutput\ZlibManipulation::stringUncompressor
     * @return null
     */
    public function testStringUncompressor()
    {
        $compressed = gzcompress('Good night, matey.');
        $this->assertEquals('Good night, matey.', $this->_zlibManipulation->stringUncompressor($compressed));
    }
}
