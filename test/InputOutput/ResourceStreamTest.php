<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 23:55:24.
 */

/**
 * @package Test\InputOutput;
 */
namespace Test\InputOutput;

/**
* Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 23:55:24.
* @author Thiago Mallon <thiagomallon@gmail.com>
* @group InputOutput
* @group InputOutput/ResourceStreamTest
*/
class ResourceStreamTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Objeto de ResourceStream
     * @var ResourceStream $_resourceStrem
     */
    protected $_resourceStream;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_resourceStream = new \App\InputOutput\ResourceStream();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_resourceStream);
    }

    /**
     * Implementa testes ao método criador de stream wrappers
     * @covers App\InputOutput\ResourceStream::factoryStreamWrapper
     * @return void
     */
    public function testFactoryStreamWrapper()
    {
        // recebe handler do string; atribui-se conteúdo ao stream
        $streamHandler = $this->_resourceStream->factoryStreamWrapper('php', 'temp', 'a+');
        // verifica se $streamHandler é do tipo resource
        $this->assertInternalType('resource', $streamHandler);
    }

    /**
     * Implementa testes ao método de escritura em streams
     * @covers App\InputOutput\ResourceStream::writeOnStreamWrapper
     * @return void
     */
    public function testWriteOnStreamWrapper()
    {
        // recebe handler do string; atribui-se conteúdo ao stream
        $streamHandler = $this->_resourceStream->factoryStreamWrapper('php', 'temp', 'a+');
        $this->_resourceStream->writeOnStreamWrapper($streamHandler, "Hello World\n");

        // testa-se se existe a string passada, no stream
        $this->assertContains("Hello World\n", fread($streamHandler, 1024));
    }

    /**
     * Implementa testes ao método de criação de manipuladores de streams do tipo php://temp
     * @covers App\InputOutput\ResourceStream::writeOnStreamWrapper
     * @return void
     */
    public function testFactoryTempStreamManipulator()
    {
        $streamManipulator = $this->_resourceStream->factoryTempStreamManipulator('a+');

        $streamManipulator("Olá, mundo!\n", true);
        $streamManipulator("Hello World!\n");
        $this->assertEquals("Olá, mundo!\nHello World!\n", $streamManipulator());

        $streamManipulator("Bom dia!\n", true);
        $streamManipulator("Good morning!\n");
        $this->assertEquals("Bom dia!\nGood morning!\n", $streamManipulator());
    }

    /**
     * Método Verifica se wrappers disponíveis são os que constam na lista
     * @return datatype description
     * @covers App\InputOutput\ResourceStream::availableWrapper().
     */
    public function getAvailableWrapperTest()
    {
        $this->assertEquals([
            [0] => 'https',
            [1] => 'ftps',
            [2] => 'compress.zlib',
            [3] => 'compress.bzip2',
            [4] => 'php',
            [5] => 'file',
            [6] => 'glob',
            [7] => 'data',
            [8] => 'http',
            [9] => 'ftp',
            [10] => 'phar',
            [11] => 'zip',
            ], $this->_resourceStream->getAvailableWrapper());
    }
}
