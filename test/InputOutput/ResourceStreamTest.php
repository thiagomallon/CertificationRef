<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 23:55:24.
 */

/**
 * @package Test\InputOutput;
 */
namespace Test\InputOutput;

/**
* Generated by PHPUnit_SkeletonGenerator on 2015-05-10 at 23:55:24.
* @author Thiago Mallon <thiagomallon@gmail.com>
*/
class ResourceStreamTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ResourceStream
     */
    protected $_resourceStream;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_resourceStream = new \App\InputOutput\ResourceStream();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_resourceStream);
    }

    /**
     * @covers App\InputOutput\ResourceStream::factoryTempStreamWrapper
     * @todo   Implement testFactoryTempStreamWrapper().
     */
    public function testFactoryTempStreamWrapper()
    {
        // recebe handler do string; atribui-se conteúdo ao stream
        $streamHandler = $this->_resourceStream->factoryTempStreamWrapper();
        // verifica se $streamHandler é do tipo resource
        $this->assertInternalType('resource', $streamHandler);
    }

    /**
     * @covers App\InputOutput\ResourceStream::writeOnTempStreamWrapper
     * @todo   Implement testWriteOnTempStreamWrapper().
     */
    public function testWriteOnTempStreamWrapper()
    {
        // recebe handler do string; atribui-se conteúdo ao stream
        $streamHandler = $this->_resourceStream->factoryTempStreamWrapper();
        $this->_resourceStream->writeOnTempStreamWrapper($streamHandler, "Hello World\n");

        // testa-se se existe a string passada, no stream
        $this->assertContains("Hello World\n", fread($streamHandler, 1024));
    }

    /**
     * @covers App\InputOutput\ResourceStream::writeOnTempStreamWrapper
     * @todo   Implement factoryTempStreamManipulator().
     */
    public function testFactoryTempStreamManipulator()
    {
        $streamManipulator = $this->_resourceStream->factoryTempStreamManipulator('a+');

        $streamManipulator("Olá, mundo!\n", true);
        $streamManipulator("Hello World!\n");
        $this->assertEquals("Olá, mundo!\nHello World!\n", $streamManipulator());

        $streamManipulator("Bom dia!\n", true);
        $streamManipulator("Good morning!\n");
        $this->assertEquals("Bom dia!\nGood morning!\n", $streamManipulator());
    }
}
