<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-11 at 21:09:10.
 */

/**
 * @subpackage Test\OOProgramming;
 */
namespace Test\OOProgramming;

/**
 * Classe de testes ao objeto ClosuresToBind
 * @author Thiago Mallon <thiagomallon@gmail.com>
 * @group OOProgramming
 * @group OOProgramming/ClosuresToBind
 */
class ClosuresToBindTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Propriedade usada como stub de ClosuresToBind
     * @var ClosuresToBind $_closuresToBind
     */
    protected $_closuresToBind;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_closuresToBind = new \App\OOProgramming\ClosuresToBind();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        // limpa stub de ClosuresToBind
        unset($this->_closuresToBind);
    }

    /**
     * Método aplica método bindTo do closure de Closures à ClosuresToBind.
     * O método bindTo da classe Closure do PHP, é usado para atribuição do closure
     * a um outro objeto, passado via parâmetro ao mesmo. No primeiro parâmetro passamos
     * a classe que desejamos que o closure associe o $this, e no segundo parâmetro, a
     * classe que desejamos que ele esteja no escopo.
     * @return null
     */
    public function testBindingClosure()
    {
        $stubClosures = $this->getMockBuilder('App\OOProgramming\Closures')
        //->setMockClassName('Closures')
        ->setMethods(null)
        ->getMock();

        $myClosure = $stubClosures->getClosureFeatProperty(); // atribui closure retornado da função à $myClosure
        $this->assertInstanceOf('Closure', $myClosure); // closure é instância de closure e não da classe que o declara
        $myClosure("Atribuíndo à propriedade de Closures"); // chama closure, passando valor a ser atribuído à propriedade da classe em que ele foi originalmente declarado
        $this->assertEquals("Atribuíndo à propriedade de Closures", $stubClosures->getProperty1()); // verifica se, de fato, valor foi atribuído à propriedade do objeto

        //print_r($myClosure);
        /* Abaixo, na chamada ao método bindTo, do closure, é importante ressaltar que só é possível chamar
        o método por que um closure sempre será uma instância da classe do PHP Closure. Outro ponto a ser 
        exaltado é que quando o closure altera propriedades não públicas o segundo parâmetro de bindTo se faz
        necessário, uma vez que ele deve fazer parte do escopo do objeto para ter permissão de alterar propriedades
        não públicas. */
        $newClosure = $myClosure->bindTo($this->_closuresToBind, $this->_closuresToBind); // implementa bind do closure do objeto de Closures ao objeto de ClosuresToBind
        $newClosure("Atribuíndo à propriedade de ClosuresToBind"); // atribui-se valor à propriedade
        $this->assertEquals("Atribuíndo à propriedade de ClosuresToBind", $this->_closuresToBind->getProperty1()); // verifica se, de fato, valor foi atribuído à propriedade do objeto ClosuresToBind

        //print_r($newClosure);
        // $rfxClosureToBind = new \ReflectionClass($this->_closuresToBind);
        // print_r($rfxClosureToBind->getMethods());
        // $rfxClosure = new \ReflectionClass($stubClosure);
        //print_r($rfxClosure->getMethods());
        unset($stubClosure);
    }
}
