<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-05 at 10:12:15.
 */

/**
 * @subpackage Test\OOProgramming
 */
namespace Test\OOProgramming;

/**
 * Classe de testes à classe Daughter
 * @author Thiago Mallon <thiagomallon@gmail.com>
 * @group OOProgramming
 * @group OOProgramming/DaughterTest
 */
class DaughterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Instância da classe Daughter
     * @var object $_daughter
     */
    protected $_daughter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        /* Cria stub da classe a ser testada (just for fun) */
        $this->_daughter = $this->getMockBuilder('\App\OOProgramming\Daughter')
        ->setMethods(null)
        ->getMock();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
        unset($this->_daughter); // 'destroi' instância
    }

    /**
     * Método testa retorno do método getGrandMaName, que por sua vez, faz chamada ao método getName
     * da classe OOGrancMa, porém, observa-se que o valor original da propriedade $name (o da classe
     * OOGrancMa), foi sobrescrito, já que nas classe Mother e Daughter, a mesma propriedade é
     * setada, na sobrescrição do construtor, um jeito de consiguir pegar o valor declarado no contrutor
     * da classe GrandMa, é apresentado no método de teste que se segue.
     * @return null
     * @covers App\OOProgramming\Daughter::getGrandMaName
     */
    public function testAcessoGrandMa()
    {
        $this->assertNotEquals('GrandMa class', $this->_daughter->getGrandMaName());
        $this->assertEquals('MotherClass!DaughterClass!', $this->_daughter->getGrandMaName());
    }

    /**
     * Método implementa, no metodo da classe, testado, uma forma de recuperação do valor original
     * da propriedade, uma vez que a mesma é atribuída no método construtor, sendo o mesmo sobrescrito
     * nas demais classes que herdam (Mother e Daughter).
     * @return null
     * @covers App\OOProgramming\Daughter::getMomName
     */
    public function testGetMomName()
    {
        $this->assertEquals('MotherClass!', $this->_daughter->getMomName());
    }

    /**
     * The testCheck method
     * @covers App\OOProgramming\CPFValidator::check
     * @covers App\OOProgramming\Daughter::check
     * @return null
     */
    public function testCheck()
    {
        $cpf = 'Taguating';
        $callRes = $this->_daughter->check($cpf);
        $this->assertEquals("Welcome to Alabama, user: {$cpf}", $callRes);
    }

    /**
     * The testValidate method testa chamada a implementação de método abstrato declarado no Trait
     * e implementado na classe Daughter.
     * @covers App\OOProgramming\CPFValidator::validate
     * @covers App\OOProgramming\Daughter::validate
     * @return null
     */
    public function testValidate()
    {
        $cpf = 'nothingMuch...';
        $callRes = $this->_daughter->validate($cpf);
        $this->assertEquals("It's validated: {$cpf}", $callRes);
    }
}
