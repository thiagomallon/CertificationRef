<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-15 at 18:48:54.
 */
                
/**
 * @subpackage Test\OOProgramming
 */
namespace Test\OOProgramming;

/**
 * Classe de testes ao objeto de StaticStuffDaughter
 * @author Thiago Mallon <thiagomallon@gmail.com>
 */
class StaticStuffDaughterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Closure $_lateStatic
     * $_lateStatic se faz instância de Clousures.
     */
    protected $_lateStatic;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_lateStatic = new \App\OOProgramming\StaticStuffDaughter;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_lateStatic);
    }

    /**
     * Método testa retorno de seeNeverYours
     * @covers App\OOProgramming\StaticStuffDaughter::getStaticProp
     * @covers App\OOProgramming\StaticStuffDaughter::seeNeverYours
     * @covers App\OOProgramming\StaticStuffDaughter::getCouldBeYours
     * @todo   Implement testSeeNeverYours().
     */
    public function testSeeNeverYours()
    {
        /* aqui, não se aplica o conceito late static binding */
        $this->assertEquals('Daughter scope', \App\OOProgramming\StaticStuffDaughter::getStaticProp());
        /* aqui pode-se observar o conceito do late static binding */
        $this->assertContains('Mother scope, son', \App\OOProgramming\StaticStuffDaughter::getStaticStuff());
        /* aqui, não se aplica o conceito late static binding */
        $this->assertContains('Yet Daughter scope, son', \App\OOProgramming\StaticStuffDaughter::getCouldBeYours());

    }

    /**
     * Método implementa chamada à método estático através do objeto e não pelo nome da classe,
     * como habitual.
     * @return void
     * @covers App\OOProgramming\StaticStuffDaughter::getStaticProp
     */
    public function testCallStaticMethodFromObj()
    {
        /* verifica-se que quando precisa-se chamar um método estático através do objeto,
         * a abordagem é a mesma de um método convencional, e não o operador de resolução
         * de escopo, como faz-se pela chamada pelo nome da classe
         */
        $this->assertEquals('Daughter scope', $this->_lateStatic->getStaticProp());
    }
}
