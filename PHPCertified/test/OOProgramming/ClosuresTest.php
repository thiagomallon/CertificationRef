<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-05 at 16:55:51.
 */
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-05 at 16:55:51.
 * @author Thiago Mallon <thiagomallon@gmail.com>
 * @group OOProgramming
 * @group ClosuresTest
 */
class ClosuresTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Closures
     * $_closures se faz instância de Clousures.
     */
    protected $_closures;
    /**
    * @var $testarosa
    * $testarosa se faz variável para futuros testes
    */
    protected $testarosa;
    /**
    * @var Alterate
    * $_alterate se tornará instância de Alterate
    */
    protected $_alterate;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_closures = new \App\OOProgramming\Closures();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->_closures);
    }

    /**
     * Testa-se a forma mais simples de um closure declarado em escopo de método.
     * Neste closure, apenas é retornada uma string, com uma mensagem genérica.
     * @covers Closures::getClosure
     */
    public function testGetClosure()
    {
        $closure = $this->_closures->getClosure();
        $this->assertEquals('This closure is saying hi!', $closure());
    }

    /**
     * O closure testao implementa recebimento de parâmetro e atribui o mesmo a uma
     * propriedade do objeto do qual é membro.
     * @covers Closures::getClosureFeatParam
     */
    public function testGetClosureFeatParam()
    {
        $closure = $this->_closures->getClosureFeatParam();
        $this->assertEquals('Callback message...', $closure('Callback message...'));
    }

    /**
     * Neste método é verificado que closures podem alterar propriedades da classe
     * em que foi criado. Observamos por chamar o método getProperty1(), que nos retornou a
     * string que passamos ao closure, que por sua vez atribui à propriedade $property1 do
     * objeto Clousures.
     * @covers Closures::getClosureFeatProperty
     */
    public function testGetClosureFeatProperty()
    {
        $closure = $this->_closures->getClosureFeatProperty();
        $this->assertEquals('Give me back!', $closure('Give me back!'));
        $this->assertEquals('Give me back!', $this->_closures->getProperty1());
    }

    /**
     * Método testa se closure é instância da classe testada e não é. Apesar
     * de o closure poder alterar propriedades da classe a qual pertence, o mesmo
     * não se faz instância da última.
     * @covers Closures::getClosureFeatProperty
     */
    public function testClousureInstance()
    {
        $closure = $this->_closures->getClosureFeatProperty();
        // verifica se closure é instância do objeto Closure, do PHP
        $this->assertInstanceOf('\Closure', $closure);
        // verifica se closure não é instância da classe testada
        $this->assertNotInstanceOf('\App\OOProgramming\Closures', $closure);
    }

    /**
     * O closure testado espera um parâmetro na sua chamada e também faz uso de
     * dados externos, pela palavra chave 'use'. Para argumento do 'use', passamos
     * o parâmetro atribuído ao método que contém o closure. Este closure também
     * altera uma propriedade da classe testada.
     * @covers Closures::getClosureFeatPropertyParam
     */
    public function testGetClosureFeatPropertyParam()
    {
        $closure = $this->_closures->getClosureFeatPropertyParam('The begin...');
        $this->assertContains('begin...and', $closure('and the end'));
        $this->assertContains('begin...and the', $this->_closures->getProperty1());
    }
}
